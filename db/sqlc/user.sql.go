// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
    (username, hashed_password, full_name, email)
VALUES
    ($1, $2, $3, $4)
RETURNING username, hashed_password, full_name, email, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, full_name, email, created_at FROM users 
WHERE username = $1
`

type GetUserRow struct {
	Username  string    `json:"username"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT username, hashed_password
FROM users WHERE username = $1
`

type LoginUserRow struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(&i.Username, &i.HashedPassword)
	return i, err
}
