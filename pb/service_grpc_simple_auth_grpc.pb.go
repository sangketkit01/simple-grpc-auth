// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: service_grpc_simple_auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcSimpleAuth_CreateUser_FullMethodName = "/pb.GrpcSimpleAuth/CreateUser"
	GrpcSimpleAuth_LoginUser_FullMethodName  = "/pb.GrpcSimpleAuth/LoginUser"
)

// GrpcSimpleAuthClient is the client API for GrpcSimpleAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSimpleAuthClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
}

type grpcSimpleAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSimpleAuthClient(cc grpc.ClientConnInterface) GrpcSimpleAuthClient {
	return &grpcSimpleAuthClient{cc}
}

func (c *grpcSimpleAuthClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, GrpcSimpleAuth_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcSimpleAuthClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, GrpcSimpleAuth_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSimpleAuthServer is the server API for GrpcSimpleAuth service.
// All implementations must embed UnimplementedGrpcSimpleAuthServer
// for forward compatibility.
type GrpcSimpleAuthServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	mustEmbedUnimplementedGrpcSimpleAuthServer()
}

// UnimplementedGrpcSimpleAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcSimpleAuthServer struct{}

func (UnimplementedGrpcSimpleAuthServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGrpcSimpleAuthServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGrpcSimpleAuthServer) mustEmbedUnimplementedGrpcSimpleAuthServer() {}
func (UnimplementedGrpcSimpleAuthServer) testEmbeddedByValue()                        {}

// UnsafeGrpcSimpleAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcSimpleAuthServer will
// result in compilation errors.
type UnsafeGrpcSimpleAuthServer interface {
	mustEmbedUnimplementedGrpcSimpleAuthServer()
}

func RegisterGrpcSimpleAuthServer(s grpc.ServiceRegistrar, srv GrpcSimpleAuthServer) {
	// If the following call pancis, it indicates UnimplementedGrpcSimpleAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcSimpleAuth_ServiceDesc, srv)
}

func _GrpcSimpleAuth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSimpleAuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcSimpleAuth_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSimpleAuthServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcSimpleAuth_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSimpleAuthServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcSimpleAuth_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSimpleAuthServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcSimpleAuth_ServiceDesc is the grpc.ServiceDesc for GrpcSimpleAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcSimpleAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GrpcSimpleAuth",
	HandlerType: (*GrpcSimpleAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GrpcSimpleAuth_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _GrpcSimpleAuth_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_grpc_simple_auth.proto",
}
